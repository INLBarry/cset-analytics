using System;
using CsetAnalytics.DomainModels.Models;
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.ChangeTracking;

namespace CsetAnalytics.DomainModels
{
    public class CsetContext : IdentityDbContext<ApplicationUser>
    {
        public DbSet<AnalyticDemographic> AnalyticDemographics { get; set; }
        public DbSet<AnalyticQuestion> AnalyticQuestions { get; set; }
        public DbSet<PasswordHistory> PasswordHistories { get; set; }
        public DbSet<Configuration> Configurations { get; set; }
        
        
        public CsetContext(DbContextOptions<CsetContext> options) : base(options)
        {
        }

        public CsetContext() { }

        protected override void OnModelCreating(ModelBuilder builder)
        {
            base.OnModelCreating(builder);
            builder.Entity<PasswordHistory>().HasOne(c => c.ApplicationUser).WithMany(c => c.PasswordHistories).HasForeignKey(f => f.AspNetUserId).HasForeignKey(f => f.CreatedUserId);
            builder.Entity<AnalyticQuestion>().HasOne(c => c.AnalyticDemographic).WithMany(c => c.AnalyticQuestions)
                .HasForeignKey(f => f.AnalyticDemographicId).HasForeignKey(f => f.AnalyticDemographicId);
            builder.Entity<AnalyticQuestion>().Property(p => p.AnalyticQuestionId).ValueGeneratedOnAdd();
            builder.Entity<AnalyticDemographic>().HasOne(a=>a.ApplicationUser).WithMany(c=>c.AnalyticDemographics).HasForeignKey(f => f.AspNetUserId);
            builder.Entity<AnalyticDemographic>().HasMany(q => q.AnalyticQuestions);
            builder.Entity<AnalyticDemographic>().Property(p => p.AnalyticDemographicId).ValueGeneratedOnAdd();
        }

        /// <summary>
        /// Returns a DbSet TEntity> instance for access to entities of the given type in the context and the underlying store
        /// </summary>
        /// <typeparam name="TEntity">The entity type for which a set should be returned</typeparam>
        /// <returns>An IDbSet instance for the given entity type</returns>
        public new DbSet<TEntity> Set<TEntity>() where TEntity : class
        {
            return base.Set<TEntity>();
        }

        /// <summary>
        /// Saves all changes made in this context to the underlying database
        /// </summary>
        /// <returns>The number of objects written to the underlying database</returns>
        public new int SaveChanges()
        {
            return base.SaveChanges();
        }

        public new EntityEntry Entry(object entity)
        {
            return base.Entry(entity);
        }

        /// <summary>
        /// Executes the given DDL/DML command against the database
        /// </summary>
        /// <param name="sql">The command string</param>
        /// <param name="parameters">The parameters to apply to the command string</param>
        /// <returns>The result returned by the database after executing the command</returns>
        public int ExecuteSqlCommand(string sql, params object[] parameters)
        {
            return this.Database.ExecuteSqlRaw(sql, parameters);
        }

        //NOTE: Dispose code and comments below generated by Resharper
        private bool _disposedValue = false; // To detect redundant calls

        protected virtual void Dispose(bool disposing)
        {
            if (!_disposedValue)
            {
                if (disposing)
                {
                    // TODO: dispose managed state (managed objects).
                }

                // TODO: free unmanaged resources (unmanaged objects) and override a finalizer below.
                // TODO: set large fields to null.

                _disposedValue = true;
            }
        }

        /// <summary>
        /// Disposes the context. The underlying ObjectContext and connection to the database (DbConnection) are disposed, if it
        /// was created by this context or ownership was passed to this context when this context was created.
        /// </summary>
        public new void Dispose()
        {
            Dispose(true);
        }
    }
}
