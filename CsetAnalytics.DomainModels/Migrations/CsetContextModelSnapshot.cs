// <auto-generated />
using System;
using CsetAnalytics.DomainModels;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace CsetAnalytics.DomainModels.Migrations
{
    [DbContext(typeof(CsetContext))]
    partial class CsetContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.1.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("CsetAnalytics.DomainModels.Models.AnalyticDemographic", b =>
                {
                    b.Property<int>("AnalyticDemographicId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Assets")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.Property<int>("IndustryId")
                        .HasColumnType("integer");

                    b.Property<int>("SectorId")
                        .HasColumnType("integer");

                    b.Property<string>("Size")
                        .HasColumnType("character varying(100)")
                        .HasMaxLength(100);

                    b.HasKey("AnalyticDemographicId");

                    b.HasIndex("SectorId", "IndustryId");

                    b.ToTable("AnalyticDemographics");
                });

            modelBuilder.Entity("CsetAnalytics.DomainModels.Models.AnalyticQuestionAnswer", b =>
                {
                    b.Property<int>("AnalyticQuestionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Answer_Text")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int>("Assessment_Id")
                        .HasColumnType("integer");

                    b.Property<int?>("Assessment_Id1")
                        .HasColumnType("integer");

                    b.Property<Guid?>("Component_Guid")
                        .HasColumnType("uuid");

                    b.Property<string>("Custom_Question_Guid")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<bool>("Is_Component")
                        .HasColumnType("boolean");

                    b.Property<bool>("Is_Framework")
                        .HasColumnType("boolean");

                    b.Property<bool>("Is_Requirement")
                        .HasColumnType("boolean");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Question_Or_Requirement_Id")
                        .HasColumnType("integer");

                    b.HasKey("AnalyticQuestionId");

                    b.HasIndex("Answer_Text");

                    b.HasIndex("Assessment_Id");

                    b.HasIndex("Assessment_Id1");

                    b.ToTable("AnalyticQuestionAnswer","public");
                });

            modelBuilder.Entity("CsetAnalytics.DomainModels.Models.Answer_Lookup", b =>
                {
                    b.Property<string>("Answer_Text")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Answer_Full_Name")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("Answer_Text");

                    b.ToTable("Answer_Lookup");
                });

            modelBuilder.Entity("CsetAnalytics.DomainModels.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<bool>("ChangePassword")
                        .HasColumnType("boolean");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FirstName")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.Property<Guid?>("Guid_Id")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsSuperUser")
                        .HasColumnType("boolean");

                    b.Property<string>("LastName")
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<bool>("PasswordResetRequired")
                        .HasColumnType("boolean");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("CsetAnalytics.DomainModels.Models.Assessment", b =>
                {
                    b.Property<int>("Assessment_Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Alias")
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.Property<int>("AnalyticDemographicId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("AssessmentCreatedDate")
                        .HasColumnType("timestamptz");

                    b.Property<string>("AssessmentCreatorId")
                        .HasColumnType("text");

                    b.Property<DateTime>("Assessment_Date")
                        .HasColumnType("timestamptz");

                    b.Property<string>("Assessment_GUID")
                        .HasColumnType("text");

                    b.Property<DateTime?>("LastAccessedDate")
                        .HasColumnType("timestamptz");

                    b.HasKey("Assessment_Id");

                    b.HasIndex("AnalyticDemographicId");

                    b.HasIndex("AssessmentCreatorId");

                    b.ToTable("Assessments","public");
                });

            modelBuilder.Entity("CsetAnalytics.DomainModels.Models.Configuration", b =>
                {
                    b.Property<int>("ConfigurationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ConfigurationKey")
                        .HasColumnType("text");

                    b.Property<string>("ConfigurationValue")
                        .HasColumnType("text");

                    b.HasKey("ConfigurationId");

                    b.ToTable("Configuration","public");
                });

            modelBuilder.Entity("CsetAnalytics.DomainModels.Models.PasswordHistory", b =>
                {
                    b.Property<int>("PasswordHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("AspNetUserId")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("CreatedUserId")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.HasKey("PasswordHistoryId");

                    b.HasIndex("CreatedUserId");

                    b.ToTable("PasswordHistory","public");
                });

            modelBuilder.Entity("CsetAnalytics.DomainModels.Models.Sector", b =>
                {
                    b.Property<int>("SectorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("SectorName")
                        .IsRequired()
                        .HasColumnType("character varying(50)")
                        .HasMaxLength(50);

                    b.HasKey("SectorId");

                    b.ToTable("Sector");
                });

            modelBuilder.Entity("CsetAnalytics.DomainModels.Models.Sector_Industry", b =>
                {
                    b.Property<int>("SectorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("IndustryId")
                        .HasColumnType("integer");

                    b.Property<string>("IndustryName")
                        .IsRequired()
                        .HasColumnType("character varying(150)")
                        .HasMaxLength(150);

                    b.HasKey("SectorId", "IndustryId");

                    b.ToTable("Sector_Industries");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("character varying(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("CsetAnalytics.DomainModels.Models.AnalyticDemographic", b =>
                {
                    b.HasOne("CsetAnalytics.DomainModels.Models.Sector_Industry", "Sector_Industry")
                        .WithMany("AnalyticDemographics")
                        .HasForeignKey("SectorId", "IndustryId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();
                });

            modelBuilder.Entity("CsetAnalytics.DomainModels.Models.AnalyticQuestionAnswer", b =>
                {
                    b.HasOne("CsetAnalytics.DomainModels.Models.Answer_Lookup", "Answer_Lookup")
                        .WithMany("AnalyticQuestionAnswers")
                        .HasForeignKey("Answer_Text")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("CsetAnalytics.DomainModels.Models.Assessment", "Assessment")
                        .WithMany("Questions")
                        .HasForeignKey("Assessment_Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CsetAnalytics.DomainModels.Models.Assessment", null)
                        .WithMany("AnalyticQuestionAnswers")
                        .HasForeignKey("Assessment_Id1");
                });

            modelBuilder.Entity("CsetAnalytics.DomainModels.Models.Assessment", b =>
                {
                    b.HasOne("CsetAnalytics.DomainModels.Models.AnalyticDemographic", "AnalyticDemographic")
                        .WithMany("Assessments")
                        .HasForeignKey("AnalyticDemographicId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .IsRequired();

                    b.HasOne("CsetAnalytics.DomainModels.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("Assessments")
                        .HasForeignKey("AssessmentCreatorId")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("CsetAnalytics.DomainModels.Models.PasswordHistory", b =>
                {
                    b.HasOne("CsetAnalytics.DomainModels.Models.ApplicationUser", "ApplicationUser")
                        .WithMany("PasswordHistories")
                        .HasForeignKey("CreatedUserId");
                });

            modelBuilder.Entity("CsetAnalytics.DomainModels.Models.Sector_Industry", b =>
                {
                    b.HasOne("CsetAnalytics.DomainModels.Models.Sector", "Sector")
                        .WithMany("Sector_Industry")
                        .HasForeignKey("SectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("CsetAnalytics.DomainModels.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("CsetAnalytics.DomainModels.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CsetAnalytics.DomainModels.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("CsetAnalytics.DomainModels.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
